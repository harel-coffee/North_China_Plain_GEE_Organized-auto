theme(plot.margin = margin(l=-0.5, b = -0.5,unit="cm"))}
p_3_1 = data.original_fitted %>%
group_by(Type) %>%
ggplot(aes(x=time,y=val,color=Type)) +
geom_line() +
facet_grid(Index~.,scale='free') +
scale_x_date(minor_breaks = '1 month',
breaks =  seq(as.Date("2017-01-01"), as.Date("2020-01-01"), by="6 months"),
date_labels = "%b\n%Y") +
labs(x='Date',y= 'Value')
plt_one_fourier = p_3_1 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
strip.background = element_rect(fill = NA,
color = 'grey50'))
plt_one_fourier
geom = 'raster',
aes(fill = after_stat(count)),
contour = FALSE,
show.legend = F) +
facet_grid(Index~From)
data.Fourier %>%
filter(  (From == 'Original value') & (((value > - 1)&(value < 1)))) %>%
ggplot(aes(x=Date,y=value)) +
facet_grid(Index~Type) +
stat_density_2d(
geom = 'raster',
aes(fill = after_stat(count)),
contour = FALSE)  +
stat_summary(data = data.Fourier %>% filter(  (From == 'Fourier fit') & (value < 1)) ,
fun = 'mean',
aes(color = 'Fourier fit'),
geom ='line',
size = 1) +
scale_color_manual(values ='#DD4F42' )
data.Fourier %>%
filter(  From == 'Original value') %>%
ggplot(aes(x=Date,y=value)) +
facet_grid(Index~Type) +
stat_density_2d(
geom = 'raster',
aes(fill = after_stat(count)),
contour = FALSE)  +
stat_summary(data = data.Fourier %>% filter(  (From == 'Fourier fit') & (value < 1)) ,
fun = 'mean',
aes(color = 'Fourier fit'),
geom ='line',
size = 1) +
scale_color_manual(values ='#DD4F42' )
geom = 'raster',
aes(fill = after_stat(count)),
contour = FALSE)  +
stat_summary(data = data.Fourier %>% filter(  (From == 'Fourier fit') & (value < 1)) ,
fun = 'mean',
aes(color = 'Fourier fit'),
geom ='line',
size = 1) +
scale_color_manual(values ='#DD4F42' )
View(data.Fourier)
plot_grid(greedy = T,rel_widths = c(5,5),ncol = 2,align = 'hv',
plots[[1]] + coord_cartesian(ylim = c(0,0.8)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()),
plots[[2]] + coord_cartesian(ylim = c(0,0.8)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()),
plots[[3]] + coord_cartesian(ylim = c(-0.5,0.2)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()),
plots[[4]] + coord_cartesian(ylim = c(-0.5,0.2)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()),
plots[[5]] + coord_cartesian(ylim = c(0,0.7)),
plots[[6]] + coord_cartesian(ylim = c(0,0.7)) + theme(axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()))
plots[[6]]
plots[[6]] +
scale_fill_continuous()
plots[[6]] +
scale_fill_continuous()
plots[[6]] +
scale_fill_grey()
plots[[6]] +
scale_fill_viridis_c()
plots[[6]] +
scale_fill_gradient()
plots[[6]] +
scale_fill_gradient(low = "white",
high = "black",)
plots[[1]] +
scale_fill_gradient(low = "white",
high = "black",)
filter_fourier = function(df,x) {
select_df = df %>%
dplyr::filter(Type == x[1]) %>%
dplyr::filter(Index == x[2])
original_df = select_df %>% filter(From == 'Original value') %>%
filter(value < 1) %>%
filter(value > -1)
fit_df = select_df %>% filter(From == 'Fourier fit')%>%
filter(value < 1) %>%
filter(value > -1)
ggplot(original_df,aes(x=Date,y=value)) +
# plot_1: raster of original values
stat_density_2d(
data =  original_df,
geom = 'raster',
aes(fill = after_stat(count)),
contour = FALSE,
show.legend = F) +
# plot_2: ribbon of fit value
stat_summary(
data = fit_df,
fun.data = 'mean_se',
geom  ='ribbon',
fill = '#4B91C3',
alpha = 1/2) +
# plot_3: line of fit value
stat_summary(
data = fit_df,
fun  = 'mean',
geom ='line',
size = 3/5,
color = '#4B91C3') +
# expand to full panel
scale_x_date(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_gradient(limits = c(0, 500), oob = scales::squish) +
theme(plot.margin = margin(l=-0.5, b = -0.5,unit="cm"))}
# create a df that stores all From|Type|Index combinations and the correspoding plots
combo_df = expand.grid(unique(data.Fourier$Type),unique(data.Fourier$Index))
plots = apply(combo_df,1,filter_fourier,df=data.Fourier)
plot_grid(greedy = T,rel_widths = c(5,5),ncol = 2,align = 'hv',
plots[[1]] + coord_cartesian(ylim = c(0,0.8)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()),
plots[[2]] + coord_cartesian(ylim = c(0,0.8)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()),
plots[[3]] + coord_cartesian(ylim = c(-0.5,0.2)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()),
plots[[4]] + coord_cartesian(ylim = c(-0.5,0.2)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()),
plots[[5]] + coord_cartesian(ylim = c(0,0.7)),
plots[[6]] + coord_cartesian(ylim = c(0,0.7)) + theme(axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()))
filter_fourier = function(df,x) {
select_df = df %>%
dplyr::filter(Type == x[1]) %>%
dplyr::filter(Index == x[2])
original_df = select_df %>% filter(From == 'Original value') %>%
filter(value < 1) %>%
filter(value > -1)
fit_df = select_df %>% filter(From == 'Fourier fit')%>%
filter(value < 1) %>%
filter(value > -1)
ggplot(original_df,aes(x=Date,y=value)) +
# plot_1: raster of original values
stat_density_2d(
data =  original_df,
geom = 'raster',
aes(fill = after_stat(count)),
contour = FALSE,
show.legend = F) +
# plot_2: ribbon of fit value
stat_summary(
data = fit_df,
fun.data = 'mean_se',
geom  ='ribbon',
fill = '#4B91C3',
alpha = 1/2) +
# plot_3: line of fit value
stat_summary(
data = fit_df,
fun  = 'mean',
geom ='line',
size = 3/5,
color = '#4B91C3') +
# expand to full panel
scale_x_date(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_gradient(low = "white",
high = "black",
limits = c(0, 500),
oob = scales::squish) +
theme(plot.margin = margin(l=-0.5, b = -0.5,unit="cm"))}
# create a df that stores all From|Type|Index combinations and the correspoding plots
combo_df = expand.grid(unique(data.Fourier$Type),unique(data.Fourier$Index))
plots = apply(combo_df,1,filter_fourier,df=data.Fourier)
plot_grid(greedy = T,rel_widths = c(5,5),ncol = 2,align = 'hv',
plots[[1]] + coord_cartesian(ylim = c(0,0.8)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()),
plots[[2]] + coord_cartesian(ylim = c(0,0.8)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()),
plots[[3]] + coord_cartesian(ylim = c(-0.5,0.2)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()),
plots[[4]] + coord_cartesian(ylim = c(-0.5,0.2)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()),
plots[[5]] + coord_cartesian(ylim = c(0,0.7)),
plots[[6]] + coord_cartesian(ylim = c(0,0.7)) + theme(axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()))
filter_fourier = function(df,x) {
select_df = df %>%
dplyr::filter(Type == x[1]) %>%
dplyr::filter(Index == x[2])
original_df = select_df %>% filter(From == 'Original value') %>%
filter(value < 1) %>%
filter(value > -1)
fit_df = select_df %>% filter(From == 'Fourier fit')%>%
filter(value < 1) %>%
filter(value > -1)
ggplot(original_df,aes(x=Date,y=value)) +
# plot_1: raster of original values
stat_density_2d(
data =  original_df,
geom = 'raster',
aes(fill = after_stat(count)),
contour = FALSE,
show.legend = F) +
# plot_2: ribbon of fit value
stat_summary(
data = fit_df,
fun.data = 'mean_se',
geom  ='ribbon',
fill = '#F98179',
alpha = 1/2) +
# plot_3: line of fit value
stat_summary(
data = fit_df,
fun  = 'mean',
geom ='line',
size = 3/5,
color = '#F98179') +
# expand to full panel
scale_x_date(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_gradient(low = "white",
high = "black",
limits = c(0, 500),
oob = scales::squish) +
theme(plot.margin = margin(l=-0.5, b = -0.5,unit="cm"))}
# create a df that stores all From|Type|Index combinations and the correspoding plots
combo_df = expand.grid(unique(data.Fourier$Type),unique(data.Fourier$Index))
plots = apply(combo_df,1,filter_fourier,df=data.Fourier)
plot_grid(greedy = T,rel_widths = c(5,5),ncol = 2,align = 'hv',
plots[[1]] + coord_cartesian(ylim = c(0,0.8)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()),
plots[[2]] + coord_cartesian(ylim = c(0,0.8)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()),
plots[[3]] + coord_cartesian(ylim = c(-0.5,0.2)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()),
plots[[4]] + coord_cartesian(ylim = c(-0.5,0.2)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()),
plots[[5]] + coord_cartesian(ylim = c(0,0.7)),
plots[[6]] + coord_cartesian(ylim = c(0,0.7)) + theme(axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()))
# cmobine all plots into one
plt_fourier_fit = plot_grid(greedy = T,rel_widths = c(5,5),ncol = 2,align = 'hv',
plots[[1]] + coord_cartesian(ylim = c(0,0.8)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()),
plots[[2]] + coord_cartesian(ylim = c(0,0.8)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()),
plots[[3]] + coord_cartesian(ylim = c(-0.5,0.2)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()),
plots[[4]] + coord_cartesian(ylim = c(-0.5,0.2)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()),
plots[[5]] + coord_cartesian(ylim = c(0,0.7)),
plots[[6]] + coord_cartesian(ylim = c(0,0.7)) + theme(axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()))
ggsave(plot = plt_fourier_fit,
"../Section_3_1_Fourier_fit.svg",
width = 15,
height = 20,
units = "cm",
dpi=300)
ggsave(plot = plt_fourier_fit,
"../Section_3_1_Fourier_fit.png",
width = 15,
height = 20,
units = "cm",
dpi=300)
ggsave(plot = plt_fourier_fit,
"../Section_3_1_Fourier_fit.svg",
width = 15,
height = 9,
units = "cm",
dpi=300)
ggsave(plot = plt_fourier_fit,
"../Section_3_1_Fourier_fit.png",
width = 15,
height = 9,
units = "cm",
dpi=300)
library(ggplot2)
library(tidyr)
library(dplyr)
library(cowplot)
library(stringr)
library(scales)
library(colorRamps)
#______________read data, using paste to concat long file path string______________
data.landsat = read.csv(paste("../../Process_3_Explore_Result/",
"Result/",
"Landsat_distribution.csv",sep=""),
stringsAsFactors = T)
data.sentinel = read.csv(paste("../../Process_3_Explore_Result/",
"Result/",
"Sentinel_distribution.csv",sep=""),
stringsAsFactors = T)
data.landsat %>%
mutate(Sensor = case_when(Sensor == 'LT05' ~ 'Landsat 5',
Sensor == 'LE07' ~ 'Landsat 7',
Sensor == 'LC08' ~ 'Landsat 8')) %>%
group_by(Sensor,Year,Month) %>%
summarise('Observation' = n()) %>%
ggplot(aes(x=Year,y=Month,fill = Observation)) +
geom_tile(color='grey95') +
scale_x_continuous(breaks = seq(1990,2019,2),minor_breaks = seq(1990,2019,1)) +
scale_y_continuous(breaks = seq(1,12),minor_breaks = 1) +
scale_fill_binned() +
facet_grid(.~Sensor,scales = 'free',space = "free_x")
data.sentinel %>%
group_by(Year,Month) %>%
summarise('Observation' = n()) %>%
ggplot(aes(x=Year,y=Month,fill = Observation)) +
geom_tile(color='grey95') +
scale_x_continuous(breaks = seq(2015,2019,1),minor_breaks = seq(2015,2019,1)) +
scale_y_continuous(breaks = seq(1,12),minor_breaks = 1) +
scale_fill_binned()
data.landsat %>%
mutate(Sensor = case_when(Sensor == 'LT05' ~ 'Landsat 5',
Sensor == 'LE07' ~ 'Landsat 7',
Sensor == 'LC08' ~ 'Landsat 8')) %>%
group_by(Sensor,Year,Month) %>%
summarise('Observation' = n()) %>%
ggplot(aes(x=Year,y=Month,fill = Observation)) +
geom_tile(color='grey95') +
scale_x_continuous(breaks = seq(1990,2019,2),minor_breaks = seq(1990,2019,1)) +
scale_y_continuous(breaks = seq(1,12),minor_breaks = 1) +
scale_fill_binned() +
facet_grid(.~Sensor,scales = 'free',space = "free_x")
data.sentinel %>%
group_by(Year,Month) %>%
summarise('Observation' = n()) %>%
ggplot(aes(x=Year,y=Month,fill = Observation)) +
geom_tile(color='grey95') +
scale_x_continuous(breaks = seq(2015,2019,1),minor_breaks = seq(2015,2019,1)) +
scale_y_continuous(breaks = seq(1,12),minor_breaks = 1) +
scale_fill_binned()
library(ggplot2)
library(tidyr)
library(dplyr)
library(cowplot)
library(stringr)
library(scales)
library(colorRamps)
#______________read data, using paste to concat long file path string______________
data.axia0 = read.csv(paste("../../Process_3_Explore_Result/",
"Result/",
"Axix_0_long.csv",sep=""),
stringsAsFactors = T)
data.axia1 = read.csv(paste("../../Process_3_Explore_Result/",
"Result/",
"Axix_1_long.csv",sep=""),
stringsAsFactors = T)
#____________________________________Make the plot_______________________________
data.axia0 %>%
ggplot(aes(x=Lat,y=Percent,color=Year)) +
geom_line()
data.axia1 %>%
ggplot(aes(x=Lon,y=Percent,color=Year)) +
geom_line()
p_3_3 = data.landsat %>%
mutate(Sensor = case_when(Sensor == 'LT05' ~ 'Landsat 5',
Sensor == 'LE07' ~ 'Landsat 7',
Sensor == 'LC08' ~ 'Landsat 8')) %>%
group_by(Sensor,Year,Month) %>%
summarise('Observation' = n()) %>%
ggplot(aes(x=Year,y=Month,fill = Observation)) +
geom_tile(color='grey95') +
scale_x_continuous(breaks = seq(1990,2019,2),minor_breaks = seq(1990,2019,1)) +
scale_y_continuous(breaks = seq(1,12),minor_breaks = 1) +
scale_fill_binned() +
facet_grid(.~Sensor,scales = 'free',space = "free_x")
p_3_4 = data.sentinel %>%
group_by(Year,Month) %>%
summarise('Observation' = n()) %>%
ggplot(aes(x=Year,y=Month,fill = Observation)) +
geom_tile(color='grey95') +
scale_x_continuous(breaks = seq(2015,2019,1),minor_breaks = seq(2015,2019,1)) +
scale_y_continuous(breaks = seq(1,12),minor_breaks = 1) +
scale_fill_binned()
#__________step 3: save to disk_____________
p_3_4
ggsave(plot = p_3_3,
"../Section_3_1_Landsat_distribution.svg",
width = 14,
height = 8,
units = "cm",
dpi=300)
ggsave(plot = p_3_3,
"../Section_3_1_Landsat_distribution.svg",
width = 14,
height = 8,
units = "cm",
dpi=300)
ggsave(plot = p_3_3,
"../Section_3_1_Landsat_distribution.png",
width = 14,
height = 8,
units = "cm",
dpi=300)
ggsave(plot = p_3_3,
"../Section_3_1_Landsat_distribution.svg",
width = 20,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = p_3_3,
"../Section_3_1_Landsat_distribution.png",
width = 20,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = p_3_4,
"../Section_3_4_Sentinel_distribution.svg",
width = 20,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = p_3_3,
"../Section_3_4_Sentinel_distribution.png",
width = 20,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = p_3_4,
"../Section_3_4_Sentinel_distribution.svg",
width = 20,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = p_3_4,
"../Section_3_4_Sentinel_distribution.png",
width = 20,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = p_3_3,
"../Section_3_3_Landsat_distribution.svg",
width = 20,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = p_3_3,
"../Section_3_3_Landsat_distribution.png",
width = 20,
height = 10,
units = "cm",
dpi=300)

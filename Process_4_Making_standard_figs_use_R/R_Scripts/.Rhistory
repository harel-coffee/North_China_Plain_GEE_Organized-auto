mapping = aes(x=year_range, y=Overall_ACC),
fun.data  = 'mean_se',
fill = '#FF9D47',
geom= 'ribbon',
alpha = 1/5,
color = 'grey95') +
stat_summary(data = data.p_7,
group=1,
mapping = aes(x=year_range,y=Overall_ACC,color = 'Original Accuracy'),
fun = 'mean',
geom= 'line')+
labs(x='Year',
y='Accuracy (%)',
color = '',
fill = '') +
######## temporal correction accuracy
geom_line(data = Temporal_checked_df,
group =1,
mapping = aes(x=year,y=accuracy,color = 'Temporal Corrected'))
plt_compare_original_temporal_acc = p_2_3 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.17, 0.9),
legend.key = element_rect(fill = NA ))+
labs(color = '',
fill  = '',
y = 'Accuracy (%)',
x = 'Year') +
scale_y_continuous(breaks = seq(0,100,0.5))
plt_compare_original_temporal_acc
plt_temporal_window_accuracy
plt_window_iteration
plt_temporal_iteration_area
plt_temporal_iteration_area
ggsave(plot = plt_temporal_iteration_area,
"../Section_2_1_2_plt_temporal_iteration_area.png",
width = 19,
height = 9,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_iteration_area,
"../Section_2_1_2_plt_temporal_iteration_area.svg",
width = 19,
height = 9,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_iteration_area,
"../Section_2_1_2_plt_temporal_iteration_area.png",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_iteration_area,
"../Section_2_1_2_plt_temporal_iteration_area.png",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_iteration_area,
"../Section_2_1_2_plt_temporal_iteration_area.svg",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_compare_original_temporal_acc,
"../Section_2_1_2_compare_original_temporal_acc.svg",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_compare_original_temporal_acc,
"../Section_2_1_2_compare_original_temporal_acc.png",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_window_accuracy,
"../Section_2_1_1_temporal_window_accuracy.png",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_window_accuracy,
"../Section_2_1_1_temporal_window_accuracy.svg",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_window_accuracy,
"../Section_2_1_1_temporal_window_accuracy.png",
width = 20,
height = 13,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_window_accuracy,
"../Section_2_1_1_temporal_window_accuracy.svg",
width = 20,
height = 13,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_window_accuracy,
"../Section_2_1_1_temporal_window_accuracy.png",
width = 20,
height = 12,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_window_accuracy,
"../Section_2_1_1_temporal_window_accuracy.svg",
width = 20,
height = 12,
units = "cm",
dpi=500)
library(ggplot2)
library(tidyr)
library(dplyr)
library(cowplot)
library(stringr)
#________________________step 1: read data and format the df________________________
data.p_6_grid_acc = read.csv(paste("../../Process_1_GEE_Python_Classification/",
"Sub_Process_6_Before_classification_Feature_selection/",
"Result/",
"Grid_acc_tree.csv",sep=""),
stringsAsFactors = T)
p_1_6_1 = data.p_6_grid_acc %>%
filter(In_Bands == 'Spectrum_Normalize_Fourier_Terrain_Meterology') %>%
mutate(Accuracy = Accuracy *100) %>%
ggplot(aes(x=Tree,y=Accuracy)) +
stat_summary(aes(color='Accuracy(se)',group='Accuracy(se)'),
fun = 'mean',
geom = 'line') +
stat_summary(aes(fill = 'Accuracy(se)',group='Accuracy(se)'),
fun.data = 'mean_se',
geom = 'ribbon',
alpha = 1/3)+
scale_color_manual(values = c('#3081BA')) +
scale_fill_manual(values = c('#3081BA')) +
scale_x_continuous(breaks = seq(0,120,20)) +
labs(color = "",
fill  = "",
y = 'Accuracy (%)')
plt_ACC_Tree = p_1_6_1 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.83, 0.7))
plt_ACC_Tree
#___Type_1_ribbon
p_1_6_2 = data.p_6_grid_acc %>%
filter(Tree==100) %>%
mutate(Year = str_replace(Year, "_", "-")) %>%
mutate(In_Bands = str_replace_all(In_Bands, "_", " + ")) %>%
mutate(In_Bands = str_replace_all(In_Bands, "Fourier", "Temporal")) %>%
mutate(Accuracy = Accuracy *100) %>%
ggplot(aes(x=Year,y=Accuracy,group=In_Bands,color=In_Bands,fill=In_Bands)) +
stat_summary(fun = 'mean',geom = 'line') +
stat_summary(fun.data = 'mean_se',
geom = 'ribbon',
alpha = 1/3,
size=0.1,
color='grey99')
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.57)) +
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_bar = data.p_6_grid_acc %>%
filter(Tree==100) %>%
mutate(Year = str_replace(Year, "_", "-")) %>%
mutate(In_Bands = str_replace_all(In_Bands, "_", " + ")) %>%
mutate(Accuracy = Accuracy *100) %>%
ggplot(aes(x=Year,y=Accuracy,fill = In_Bands)) +
stat_summary(fun='mean',geom='bar',color='grey90',position = 'dodge') +
coord_cartesian(ylim = c(80,97)) +
labs(fill = 'Input bands') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line()) +
scale_fill_viridis_d(option = 'D')
plt_inbands_acc_ribbon
plt_inbands_acc_bar
plt_inbands_acc_ribbon
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.57)) +
ylab('Overall Accuracy(%)')
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.57)) +
ylab('Overall Accuracy(%)') +
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_ribbon
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 23,
height = 15,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 23,
height = 15,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 20,
height = 15,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 20,
height = 15,
units = "cm",
dpi=500)
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.57),
legend.background = element_blank()) +
ylab('Overall Accuracy(%)') +
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_ribbon
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 20,
height = 15,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 20,
height = 15,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 20,
height = 13,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 20,
height = 13,
units = "cm",
dpi=500)
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.60),
legend.background = element_blank()) +
ylab('Overall Accuracy(%)') +
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.60),
legend.background = element_blank()) +
ylab('Overall Accuracy(%)') +
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_ribbon
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 20,
height = 13,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 20,
height = 13,
units = "cm",
dpi=500)
View(p_1_6_2)
View(data.p_6_grid_acc)
#___Type_1_ribbon
p_1_6_2 = data.p_6_grid_acc %>%
filter(Tree==100) %>%
mutate(Year = str_replace(Year, "_", "-")) %>%
mutate(In_Bands = str_replace_all(In_Bands, "_", " + ")) %>%
mutate(In_Bands = str_replace_all(In_Bands, "Meterology", "Meteorology")) %>%
mutate(Accuracy = Accuracy *100) %>%
ggplot(aes(x=Year,y=Accuracy,group=In_Bands,color=In_Bands,fill=In_Bands)) +
stat_summary(fun = 'mean',geom = 'line') +
stat_summary(fun.data = 'mean_se',
geom = 'ribbon',
alpha = 1/3,
size=0.1,
color='grey99')
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.60),
legend.background = element_blank()) +
ylab('Overall Accuracy(%)') +
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_ribbon
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 20,
height = 13,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 20,
height = 13,
units = "cm",
dpi=500)
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.60),
legend.background = element_blank()) +
ylab('Accuracy(%)') +
labs(color = 'Input predictors',
fill = 'Input predictors')
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 20,
height = 13,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 20,
height = 13,
units = "cm",
dpi=500)
library(ggplot2)
library(tidyr)
library(dplyr)
library(cowplot)
library(stringr)
library(comprehenr)
library(ggpubr)
scientific_10 <- function(x) {
parse(text=gsub("e", " %*% 10^", scales::scientific_format()(x)))
}
data.accuracy = read.csv(paste("../../Process_2_Temporal_Check/",
"Result/",
"Accuracy_comparision.csv",sep=""),
stringsAsFactors = T) %>%
mutate(Source = str_replace(Source, "My", "This study")) %>%
filter(year>=1990) %>%
filter((Source == 'This study') | (Source == 'GAIA')
| (Source == 'GIS')| (Source == 'Global Landcover 30'))
data.area_change = read.csv(paste("../../Process_2_Temporal_Check/",
"Result/",
"Area_change.csv",sep=""),
stringsAsFactors = T)
data_2_3_point = data.area_change %>%
filter((Source == 'GHSL') |(Source == 'GIS')|(Source == 'Global Landcover 30'))%>%
group_by(year,Source) %>%
summarise(area = sum(area_km2)) %>%
mutate(Source = str_replace(Source,'GIS','Global Impervious Surface'))%>%
mutate(Source = str_replace(Source,'Global Landcover 30','GlobeLand30'))
data_2_3_line = data.area_change %>%
filter((Source != 'GHSL') & (Source != 'GIS') & (Source != 'GRUMP 1995')
& (Source != 'Global Landcover 30')) %>%
group_by(year,Source) %>%
summarise(area = sum(area_km2)) %>%
mutate(Source = str_replace(Source, "My", "This study")) %>%
mutate(Source = str_replace(Source,'Global Urban He','Global Urban (He et al., 2019)'))%>%
mutate(Source = str_replace(Source,'Global Urban Liu','Global Urban (Liu et al., 2018)'))%>%
mutate(Source = str_replace(Source,'MODIS','MCD12Q1'))
p_2_3 = ggplot( data = data_2_3_line, aes(x=year,y=area))  +
geom_line(aes(color=Source),size=1) +
geom_point(data = data_2_3_point,aes(fill=Source),shape=21,size=4) +
scale_fill_manual(values = c('grey70','yellow','#4C886B'))
plt_area_change_compare = p_2_3 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
#axis.text.x.bottom = element_blank(),
legend.position = c(0.32, 0.75),
legend.key = element_rect(fill = NA ),
legend.box = "vertival",
legend.spacing.y = unit(-0.3, "cm"))+
scale_y_continuous(breaks = seq(0,200000,25000),labels = seq(0,20,2.5)) +
scale_x_continuous(breaks = seq(1980,2020,5),minor_breaks = seq(1980,2020,1))+
guides(color = guide_legend(ncol = 1)) +
labs(color = '',
fill  = '',
y = bquote('Area ('*10^5 ~km^2*')'),
x = '')
plt_area_change_compare
View(data_2_3_line)
data_2_3_line = data.area_change %>%
filter((Source != 'GHSL') & (Source != 'GIS') & (Source != 'GRUMP 1995')
& (Source != 'Global Landcover 30')) %>%
group_by(year,Source) %>%
summarise(area = sum(area_km2)) %>%
mutate(Source = str_replace(Source, "My", "This study")) %>%
mutate(Source = str_replace(Source,'Global Urban He','Global Urban Expansion'))%>%
mutate(Source = str_replace(Source,'Global Urban Liu','Global Urban Dynamics'))%>%
mutate(Source = str_replace(Source,'MODIS','MCD12Q1'))
p_2_3 = ggplot( data = data_2_3_line, aes(x=year,y=area))  +
geom_line(aes(color=Source),size=1) +
geom_point(data = data_2_3_point,aes(fill=Source),shape=21,size=4) +
scale_fill_manual(values = c('grey70','yellow','#4C886B'))
plt_area_change_compare = p_2_3 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
#axis.text.x.bottom = element_blank(),
legend.position = c(0.32, 0.75),
legend.key = element_rect(fill = NA ),
legend.box = "vertival",
legend.spacing.y = unit(-0.3, "cm"))+
scale_y_continuous(breaks = seq(0,200000,25000),labels = seq(0,20,2.5)) +
scale_x_continuous(breaks = seq(1980,2020,5),minor_breaks = seq(1980,2020,1))+
guides(color = guide_legend(ncol = 1)) +
labs(color = '',
fill  = '',
y = bquote('Area ('*10^5 ~km^2*')'),
x = '')
plt_area_change_compare
data_2_4_point = data.accuracy %>%
filter((Source == 'GIS') |(Source == 'Global Landcover 30'))
data_2_4_line = data.accuracy %>%
filter((Source == 'GAIA') |(Source == 'This study'))
p_2_4 =
ggplot() +
geom_line(data = data_2_4_line,  aes(x=year,y=Overall_ACC,color=Source),size=1) +
geom_point(data = data_2_4_point,aes(x=year,y=Overall_ACC,fill=Source),shape=21,size=4) +
expand_limits(x = c(1990,2020))
plt_acc_compare = p_2_4 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.20, 0.7),
legend.key = element_rect(fill = NA ),
legend.box = "vertical") +
scale_x_continuous(breaks = seq(1990,2020,5) ) +
scale_color_manual(values=c('#B8A105','#F565E3'))+
scale_fill_manual(values=c("#FFFF00","#4C886B")) +
guides(color = guide_legend(ncol = 1)) +
labs(color = '',
fill  = '',
x='Year',
y='Accuracy (%)')
plt_acc_compare
plt_compare_acc_area = ggarrange(plt_area_change_compare,
plt_acc_compare,
align = 'v',
ncol=1,
nrow=2,
common.legend = TRUE,
legend="right",
labels = c('a)','b)'))
plt_compare_acc_area
ggsave(plot = plt_compare_acc_area,
"../Section_2_3_Acc_compare.svg",
width = 25,
height = 20,
units = "cm",
dpi=500)
ggsave(plot = plt_compare_acc_area,
"../Section_2_3_Acc_compare.png",
width = 25,
height = 20,
units = "cm",
dpi=500)

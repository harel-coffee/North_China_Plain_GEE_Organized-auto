# plot_2: ribbon of fit value
stat_summary(
data = fit_df,
fun.data = 'mean_se',
geom  ='ribbon',
fill = '#F98179',
alpha = 1/2) +
# plot_3: line of fit value
stat_summary(
data = fit_df,
fun  = 'mean',
geom ='line',
size = 3/5,
color = '#F98179') +
# expand to full panel
scale_x_date(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_gradient(low = "white",
high = "black",
limits = c(0, 500),
oob = scales::squish) }
# create a df that stores all From|Type|Index combinations and the correspoding plots
combo_df = expand.grid(unique(data.Fourier$Type),unique(data.Fourier$Index))
# using combo_df as parameters to make plots
plots = apply(combo_df,1,filter_fourier,df=data.Fourier)
# cmobine all plots into one
plt_fourier_fit = plot_grid(greedy = T,rel_widths = c(5,5),ncol = 2,align = 'hv',
plots[[1]] + coord_cartesian(ylim = c(0,0.8)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()),
plots[[2]] + coord_cartesian(ylim = c(0,0.8)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()),
plots[[3]] + coord_cartesian(ylim = c(-0.5,0.2)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank()),
plots[[4]] + coord_cartesian(ylim = c(-0.5,0.2)) + theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()),
plots[[5]] + coord_cartesian(ylim = c(0,0.7)),
plots[[6]] + coord_cartesian(ylim = c(0,0.7)) + theme(axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()))
plt_fourier_fit
ggsave(plot = plt_fourier_fit,
"../Section_3_1_Fourier_fit.svg",
width = 15,
height = 9,
units = "cm",
dpi=300)
ggsave(plot = plt_fourier_fit,
"../Section_3_1_Fourier_fit.png",
width = 15,
height = 9,
units = "cm",
dpi=300)
View(plots)
View(plots)
View(combo_df)
library(ggplot2)
library(tidyr)
library(dplyr)
library(cowplot)
library(stringr)
#________________________step 1: read data and format the df________________________
data.p_7_acc_sentinel = read.csv(paste("../../Process_1_GEE_Python_Classification/",
"Sub_Process_7_Classification_on_img/",
"Result/",
"Classification_Accuracy_landsat_sentinel.csv",sep=""),
stringsAsFactors = T)
data.p_7_acc_landsat = read.csv(paste("../../Process_1_GEE_Python_Classification/",
"Sub_Process_7_Classification_on_img/",
"Result/",
"Classification_Accuracy.csv",sep=""),
stringsAsFactors = T)
# mutate the df so we can get 'Sentinel/Landsat' and 'Year range' seperately
data.p_7_acc_landsat = data.p_7_acc_landsat %>%
separate(col = year, into = c('type','start','end'),sep = '_') %>%
unite(col = year_range, start,end,sep='-') %>%
filter(year_range != '2014-2016') %>%
filter(year_range != '2017-2019')
data.p_7_acc_sentinel = data.p_7_acc_sentinel %>%
separate(col = year, into = c('type','start','end'),sep = '_') %>%
unite(col = year_range, start,end,sep='-')
# concat two df together and make figure
data.p_7 = rbind(data.p_7_acc_landsat,data.p_7_acc_sentinel)
plt_classification_acc = data.p_7 %>%
ggplot(aes(x=year_range,y=Overall_ACC,group=1)) +
stat_summary(aes(color='Accuracy(sd)'),
fun  = 'mean',
geom = 'line') +
stat_summary(aes(fill='Accuracy(sd)'),
fun.data = 'mean_se',
geom='ribbon',
alpha = 1/5,
color='grey98') +
labs(x = 'Year',
y ='Accuracy (%)') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.65, 0.8)) +
scale_color_manual(values = c('#3081BA')) +
scale_fill_manual(values = c('#3081BA')) +
labs(color = '',
fill = '')
plt_classification_acc
ggsave(plot = plt_classification_acc,
"../Section_1_7_classification_Accuracy.svg",
width = 16,
height = 9,
units = "cm",
dpi=300)
ggsave(plot = plt_classification_acc,
"../Section_1_7_classification_Accuracy.png",
width = 16,
height = 9,
units = "cm",
dpi=300)
ggsave(plot = plt_classification_acc,
"../Section_1_7_classification_Accuracy.svg",
width = 18,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = plt_classification_acc,
"../Section_1_7_classification_Accuracy.png",
width = 18,
height = 10,
units = "cm",
dpi=300)
plt_classification_acc = data.p_7 %>%
ggplot(aes(x=year_range,y=Overall_ACC,group=1)) +
stat_summary(aes(color='Accuracy(sd)'),
fun  = 'mean',
geom = 'line') +
stat_summary(aes(fill='Accuracy(sd)'),
fun.data = 'mean_se',
geom='ribbon',
alpha = 1/5,
color='grey98') +
labs(x = 'Year',
y ='Accuracy (%)') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.65, 0.8)) +
scale_color_manual(values = c('#3081BA')) +
scale_fill_manual(values = c('#3081BA')) +
scale_y_continuous(breaks = seq(1,100,1)) +
labs(color = '',
fill = '')
plt_classification_acc
plt_classification_acc = data.p_7 %>%
ggplot(aes(x=year_range,y=Overall_ACC,group=1)) +
stat_summary(aes(color='Accuracy(sd)'),
fun  = 'mean',
geom = 'line') +
stat_summary(aes(fill='Accuracy(sd)'),
fun.data = 'mean_se',
geom='ribbon',
alpha = 1/5,
color='grey98') +
labs(x = 'Year',
y ='Accuracy (%)') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.65, 0.8)) +
scale_color_manual(values = c('#3081BA')) +
scale_fill_manual(values = c('#3081BA')) +
scale_y_continuous(breaks = seq(1,100,0.5)) +
labs(color = '',
fill = '')
plt_classification_acc
ggsave(plot = plt_classification_acc,
"../Section_1_7_classification_Accuracy.svg",
width = 18,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = plt_classification_acc,
"../Section_1_7_classification_Accuracy.png",
width = 18,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = plt_classification_acc,
"../Section_1_7_classification_Accuracy.svg",
width = 19,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = plt_classification_acc,
"../Section_1_7_classification_Accuracy.png",
width = 19,
height = 10,
units = "cm",
dpi=300)
plt_classification_acc = data.p_7 %>%
ggplot(aes(x=year_range,y=Overall_ACC,group=1)) +
geom_boxplot() +
labs(x = 'Year',
y ='Accuracy (%)') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.65, 0.8)) +
scale_color_manual(values = c('#3081BA')) +
scale_fill_manual(values = c('#3081BA')) +
scale_y_continuous(breaks = seq(1,100,0.5)) +
labs(color = '',
fill = '')
plt_classification_acc
data.p_7 %>%
ggplot(aes(x=year_range,y=Overall_ACC,group=1)) +
geom_boxplot() +
labs(x = 'Year',
y ='Accuracy (%)')
data.p_7 %>%
ggplot(aes(x=year_range,y=Overall_ACC)) +
geom_boxplot() +
labs(x = 'Year',
y ='Accuracy (%)')
plt_classification_acc = data.p_7 %>%
ggplot(aes(x=year_range,y=Overall_ACC)) +
geom_boxplot() +
labs(x = 'Year',
y ='Accuracy (%)') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.65, 0.8)) +
scale_color_manual(values = c('#3081BA')) +
scale_fill_manual(values = c('#3081BA')) +
scale_y_continuous(breaks = seq(1,100,0.5)) +
labs(color = '',
fill = '')
plt_classification_acc
ggsave(plot = plt_classification_acc,
"../Section_1_7_classification_Accuracy.svg",
width = 19,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = plt_classification_acc,
"../Section_1_7_classification_Accuracy.png",
width = 19,
height = 10,
units = "cm",
dpi=300)
plt_classification_acc = data.p_7 %>%
ggplot(aes(x=year_range,y=Overall_ACC)) +
stat_boxplot(geom ='errorbar',width = 0.25,color='#CAA1A0') +
geom_boxplot(outlier.size = 0.8,
outlier.alpha = 0.6,
outlier.shape = 1,
width = 0.25,
size=0.3)+
labs(x = 'Year',
y ='Accuracy (%)') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.65, 0.8)) +
scale_color_manual(values = c('#3081BA')) +
scale_fill_manual(values = c('#3081BA')) +
scale_y_continuous(breaks = seq(1,100,0.5)) +
labs(color = '',
fill = '')
plt_classification_acc
ggsave(plot = plt_classification_acc,
"../Section_1_7_classification_Accuracy.svg",
width = 19,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = plt_classification_acc,
"../Section_1_7_classification_Accuracy.png",
width = 19,
height = 10,
units = "cm",
dpi=300)
plt_classification_acc = data.p_7 %>%
ggplot(aes(x=year_range,y=Overall_ACC)) +
stat_boxplot(geom ='errorbar',width = 0.25,color='#CAA1A0') +
geom_boxplot(outlier.size = 0.8,
outlier.alpha = 0.6,
outlier.shape = 1,
width = 0.3,
size=0.3)+
labs(x = 'Year',
y ='Accuracy (%)') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.65, 0.8)) +
scale_color_manual(values = c('#3081BA')) +
scale_fill_manual(values = c('#3081BA')) +
scale_y_continuous(breaks = seq(1,100,0.5)) +
labs(color = '',
fill = '')
plt_classification_acc
library(ggplot2)
library(tidyr)
library(dplyr)
library(cowplot)
library(stringr)
library(stringr)
#________________________step 1: read data and format the df________________________
data.area_change = read.csv(paste("../../Process_2_Temporal_Check/",
"Result/",
"Area_change.csv",sep=""),
stringsAsFactors = T)
View(data.area_change)
#________________________step 1: read data and format the df________________________
data.area_change = read.csv(paste("../../Process_2_Temporal_Check/",
"Result/",
"Area_change.csv",sep=""),
stringsAsFactors = T)%>%
mutate(Year = str_replace(year, "_", "-")) %>%
#______________________step 2: make plot________________________
p_2_2 = data.area_change %>%
mutate(area = sum*30*30/1000/1000) %>%
filter(Type == 'My') %>%
ggplot(aes(x=year,y=area,color=EN_Name,group=EN_Name)) +
geom_line(size=1) +
geom_point(size=1.5) +
scale_color_hue()
#________________________step 1: read data and format the df________________________
data.area_change = read.csv(paste("../../Process_2_Temporal_Check/",
"Result/",
"Area_change.csv",sep=""),
stringsAsFactors = T)%>%
mutate(year = str_replace(year, "_", "-")) %>%
#______________________step 2: make plot________________________
p_2_2 = data.area_change %>%
mutate(area = sum*30*30/1000/1000) %>%
filter(Type == 'My') %>%
ggplot(aes(x=year,y=area,color=EN_Name,group=EN_Name)) +
geom_line(size=1) +
geom_point(size=1.5) +
scale_color_hue()
#________________________step 1: read data and format the df________________________
data.area_change = read.csv(paste("../../Process_2_Temporal_Check/",
"Result/",
"Area_change.csv",sep=""),
stringsAsFactors = T)%>%
mutate(year = str_replace(year, "_", "-"))
View(data.area_change)
#______________________step 2: make plot________________________
p_2_2 = data.area_change %>%
mutate(area = sum*30*30/1000/1000) %>%
filter(Type == 'My') %>%
ggplot(aes(x=year,y=area,color=EN_Name,group=EN_Name)) +
geom_line(size=1) +
geom_point(size=1.5) +
scale_color_hue()
plt_area_change = p_2_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.15, 0.7),
legend.key = element_rect(fill = NA ))+
labs(color = '',
fill  = '',
y = 'Area (km2)',
x = 'Year')
#______________________step 3: save plot to disk________________________
plt_area_change
ggsave(plot = plt_area_change,
"../Section_2_2_Area_change.svg",
width = 20,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = plt_area_change,
"../Section_2_2_Area_change.png",
width = 20,
height = 10,
units = "cm",
dpi=300)
plt_area_change = p_2_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.13, 0.7),
legend.key = element_rect(fill = NA ))+
labs(color = '',
fill  = '',
y = 'Area (km2)',
x = 'Year')
#______________________step 3: save plot to disk________________________
plt_area_change
ggsave(plot = plt_area_change,
"../Section_2_2_Area_change.svg",
width = 20,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = plt_area_change,
"../Section_2_2_Area_change.png",
width = 20,
height = 10,
units = "cm",
dpi=300)
plt_area_change = p_2_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.13, 0.73),
legend.key = element_rect(fill = NA ))+
labs(color = '',
fill  = '',
y = 'Area (km2)',
x = 'Year')
#______________________step 3: save plot to disk________________________
plt_area_change
ggsave(plot = plt_area_change,
"../Section_2_2_Area_change.svg",
width = 20,
height = 10,
units = "cm",
dpi=300)
ggsave(plot = plt_area_change,
"../Section_2_2_Area_change.png",
width = 20,
height = 10,
units = "cm",
dpi=300)
library(ggplot2)
library(tidyr)
library(dplyr)
library(cowplot)
library(stringr)
library(comprehenr)
data.accuracy = read.csv(paste("../../Process_2_Temporal_Check/",
"Result/",
"Accuracy_comparision.csv",sep=""),
stringsAsFactors = T) %>%
mutate(year = str_replace(year,'_','-'))
p_2_3 = data.accuracy %>%
select(Type,year,Overall_ACC) %>%
ggplot(aes(x=year,y=Overall_ACC,color=Type,group=Type)) +
geom_line(size=1) +
geom_point(size=1.5)
plt_acc_compare = p_2_3 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.09, 0.96),
legend.key = element_rect(fill = NA )) +
scale_color_discrete(labels = c("GAIA", "This study")) +
labs(color = '',
fill  = '',
x='Year Range',
y='Accuracy')
plt_acc_compare = p_2_3 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.09, 0.96),
legend.key = element_rect(fill = NA )) +
scale_color_discrete(labels = c("GAIA", "This study")) +
labs(color = '',
fill  = '',
x='Year',
y='Accuracy')
#______________________step 3: save plot to disk________________________
plt_acc_compare
ggsave(plot = plt_acc_compare,
"../Section_2_3_Acc_compare.svg",
width = 22,
height = 12,
units = "cm",
dpi=300)
ggsave(plot = plt_acc_compare,
"../Section_2_3_Acc_compare.png",
width = 22,
height = 12,
units = "cm",
dpi=300)

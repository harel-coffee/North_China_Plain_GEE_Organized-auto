separate(col = year, into = c('type','start','end'),sep = '_') %>%
unite(col = year_range, start,end,sep='-')
# concat two df together and make figure
data.p_7 = rbind(data.p_7_acc_landsat,data.p_7_acc_sentinel)
plt_classification_acc = data.p_7 %>%
ggplot(aes(x=year_range,y=Overall_ACC,group=1)) +
stat_summary(aes(color='Accuracy(se)'),
fun  = 'mean',
geom = 'line') +
stat_summary(aes(fill='Accuracy(se)'),
fun.data = 'mean_se',
geom='ribbon',
alpha = 1/5,
color='grey98') +
labs(x = 'Year',
y ='Accuracy (%)') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.65, 0.8)) +
scale_color_manual(values = c('#3081BA')) +
scale_fill_manual(values = c('#3081BA')) +
labs(color = '',
fill = '')
plt_classification_acc
data.temporal_1 = read.csv(paste("../../Process_2_Temporal_Check/",
"Result/",
"Temporal_check_acc.csv",sep=""),
stringsAsFactors = T) %>%
mutate(year = str_replace(year,'_','-')) %>%
mutate(Mask = as.numeric(window - 1))
data.temporal_area = read.csv(paste("../../Process_2_Temporal_Check/",
"Result/",
"Temporal_check_area.csv",sep=""),
stringsAsFactors = T)
data.temporal_2  =  data.temporal_area %>%
pivot_longer(cols = colnames(data.temporal_area)[2:length(colnames(data.temporal_area))],
names_to = 'Year',
values_to = 'Accuracy') %>%
mutate(Year = str_replace(Year,'_','-')) %>%
mutate(Year = str_replace(Year,'X',''))
p_2_1 = data.temporal_1 %>%
ggplot(aes(x=Mask,y=accuracy))+
stat_summary(aes(color='Accuracy(se)'),
fun = 'mean',
geom = 'line',) +
stat_summary(aes(fill='Accuracy(se)'),
fun.data = 'mean_se',
geom = 'ribbon',
alpha=1/5) +
scale_color_manual(values = c('#4990C2')) +
scale_fill_manual(values = c('#4990C2')) +
labs(color = '',fill ='')
plt_temporal_window_accuracy = p_2_1 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.89,0.4)) +
xlab('Mask number')+
ylab('Overall Accuracy (%)') +
scale_x_continuous(breaks = seq(0,10,1)) +
scale_y_continuous(breaks = seq(0,100,0.5))
plt_temporal_window_accuracy
p_2_2 = data.temporal_2  %>%
ggplot(aes(x=X,y=Accuracy,color=Year)) +
geom_line() +
labs(color = '',fill ='')
plt_temporal_iteration_area = p_2_2 +
guides(col = guide_legend(nrow = 5)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.8,0.85),
legend.key = element_rect(colour = NA, fill = NA)) +
xlab('Iteration number')+
ylab('Area (km2)') +
scale_x_continuous(breaks = seq(0,10,1)) +
scale_y_continuous()
plt_temporal_iteration_area
#__________step 4: combie window_acc and iteration_acc together_____________
plt_window_iteration =  plot_grid(plt_temporal_window_accuracy,
plt_temporal_iteration_accuracy,
label_x = 0.5,
label_y = 1,
vjust = 1.8,
nrow = 2,
rel_widths = c(1,1),
labels = c('a)','b)'),
label_size = 12,
label_fontface = 'plain')
#__________step 4: combie window_acc and iteration_acc together_____________
plt_window_iteration =  plot_grid(plt_temporal_window_accuracy,
plt_temporal_iteration_area,
label_x = 0.5,
label_y = 1,
vjust = 1.8,
nrow = 2,
rel_widths = c(1,1),
labels = c('a)','b)'),
label_size = 12,
label_fontface = 'plain')
plt_window_iteration
#__________step 4: combie window_acc and iteration_acc together_____________
plt_window_iteration =  plot_grid(plt_temporal_window_accuracy,
plt_temporal_iteration_area,
label_x = 0.5,
align = 'vertical',
label_y = 1,
vjust = 1.8,
nrow = 2,
rel_widths = c(1,1),
labels = c('a)','b)'),
label_size = 12,
label_fontface = 'plain')
plt_window_iteration
#__________step 4: combie window_acc and iteration_acc together_____________
plt_window_iteration =  plot_grid(plt_temporal_window_accuracy,
plt_temporal_iteration_area,
label_x = 0.5,
align = 'v',
label_y = 1,
vjust = 1.8,
nrow = 2,
rel_widths = c(1,1),
labels = c('a)','b)'),
label_size = 12,
label_fontface = 'plain')
plt_window_iteration
Temporal_checked_df = data.temporal_1 %>%
filter(window == 3) %>%
filter(iteration == 9)
p_2_3 = ggplot() +
######## Original accuracy
stat_summary(data = data.p_7,
group=1,
mapping = aes(x=year_range, y=Overall_ACC),
fun.data  = 'mean_se',
fill = '#FF9D47',
geom= 'ribbon',
alpha = 1/5,
color = 'grey95') +
stat_summary(data = data.p_7,
group=1,
mapping = aes(x=year_range,y=Overall_ACC,color = 'Original Accuracy'),
fun = 'mean',
geom= 'line')+
labs(x='Year',
y='Accuracy (%)',
color = '',
fill = '') +
######## temporal correction accuracy
geom_line(data = Temporal_checked_df,
group =1,
mapping = aes(x=year,y=accuracy,color = 'Temporal Corrected'))
plt_compare_original_temporal_acc = p_2_3 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.17, 0.9),
legend.key = element_rect(fill = NA ))+
labs(color = '',
fill  = '',
y = 'Accuracy (%)',
x = 'Year') +
scale_y_continuous(breaks = seq(0,100,0.5))
plt_compare_original_temporal_acc
plt_temporal_window_accuracy
plt_window_iteration
plt_temporal_iteration_area
plt_temporal_iteration_area
ggsave(plot = plt_temporal_iteration_area,
"../Section_2_1_2_plt_temporal_iteration_area.png",
width = 19,
height = 9,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_iteration_area,
"../Section_2_1_2_plt_temporal_iteration_area.svg",
width = 19,
height = 9,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_iteration_area,
"../Section_2_1_2_plt_temporal_iteration_area.png",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_iteration_area,
"../Section_2_1_2_plt_temporal_iteration_area.png",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_iteration_area,
"../Section_2_1_2_plt_temporal_iteration_area.svg",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_compare_original_temporal_acc,
"../Section_2_1_2_compare_original_temporal_acc.svg",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_compare_original_temporal_acc,
"../Section_2_1_2_compare_original_temporal_acc.png",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_window_accuracy,
"../Section_2_1_1_temporal_window_accuracy.png",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_window_accuracy,
"../Section_2_1_1_temporal_window_accuracy.svg",
width = 20,
height = 10,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_window_accuracy,
"../Section_2_1_1_temporal_window_accuracy.png",
width = 20,
height = 13,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_window_accuracy,
"../Section_2_1_1_temporal_window_accuracy.svg",
width = 20,
height = 13,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_window_accuracy,
"../Section_2_1_1_temporal_window_accuracy.png",
width = 20,
height = 12,
units = "cm",
dpi=500)
ggsave(plot = plt_temporal_window_accuracy,
"../Section_2_1_1_temporal_window_accuracy.svg",
width = 20,
height = 12,
units = "cm",
dpi=500)
library(ggplot2)
library(tidyr)
library(dplyr)
library(cowplot)
library(stringr)
#________________________step 1: read data and format the df________________________
data.p_6_grid_acc = read.csv(paste("../../Process_1_GEE_Python_Classification/",
"Sub_Process_6_Before_classification_Feature_selection/",
"Result/",
"Grid_acc_tree.csv",sep=""),
stringsAsFactors = T)
p_1_6_1 = data.p_6_grid_acc %>%
filter(In_Bands == 'Spectrum_Normalize_Fourier_Terrain_Meterology') %>%
mutate(Accuracy = Accuracy *100) %>%
ggplot(aes(x=Tree,y=Accuracy)) +
stat_summary(aes(color='Accuracy(se)',group='Accuracy(se)'),
fun = 'mean',
geom = 'line') +
stat_summary(aes(fill = 'Accuracy(se)',group='Accuracy(se)'),
fun.data = 'mean_se',
geom = 'ribbon',
alpha = 1/3)+
scale_color_manual(values = c('#3081BA')) +
scale_fill_manual(values = c('#3081BA')) +
scale_x_continuous(breaks = seq(0,120,20)) +
labs(color = "",
fill  = "",
y = 'Accuracy (%)')
plt_ACC_Tree = p_1_6_1 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.83, 0.7))
plt_ACC_Tree
#___Type_1_ribbon
p_1_6_2 = data.p_6_grid_acc %>%
filter(Tree==100) %>%
mutate(Year = str_replace(Year, "_", "-")) %>%
mutate(In_Bands = str_replace_all(In_Bands, "_", " + ")) %>%
mutate(In_Bands = str_replace_all(In_Bands, "Fourier", "Temporal")) %>%
mutate(Accuracy = Accuracy *100) %>%
ggplot(aes(x=Year,y=Accuracy,group=In_Bands,color=In_Bands,fill=In_Bands)) +
stat_summary(fun = 'mean',geom = 'line') +
stat_summary(fun.data = 'mean_se',
geom = 'ribbon',
alpha = 1/3,
size=0.1,
color='grey99')
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.57)) +
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_bar = data.p_6_grid_acc %>%
filter(Tree==100) %>%
mutate(Year = str_replace(Year, "_", "-")) %>%
mutate(In_Bands = str_replace_all(In_Bands, "_", " + ")) %>%
mutate(Accuracy = Accuracy *100) %>%
ggplot(aes(x=Year,y=Accuracy,fill = In_Bands)) +
stat_summary(fun='mean',geom='bar',color='grey90',position = 'dodge') +
coord_cartesian(ylim = c(80,97)) +
labs(fill = 'Input bands') +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line()) +
scale_fill_viridis_d(option = 'D')
plt_inbands_acc_ribbon
plt_inbands_acc_bar
plt_inbands_acc_ribbon
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.57)) +
ylab('Overall Accuracy(%)')
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.57)) +
ylab('Overall Accuracy(%)') +
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_ribbon
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 23,
height = 15,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 23,
height = 15,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 20,
height = 15,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 20,
height = 15,
units = "cm",
dpi=500)
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.57),
legend.background = element_blank()) +
ylab('Overall Accuracy(%)') +
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_ribbon
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 20,
height = 15,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 20,
height = 15,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 20,
height = 13,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 20,
height = 13,
units = "cm",
dpi=500)
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.60),
legend.background = element_blank()) +
ylab('Overall Accuracy(%)') +
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.60),
legend.background = element_blank()) +
ylab('Overall Accuracy(%)') +
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_ribbon
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 20,
height = 13,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 20,
height = 13,
units = "cm",
dpi=500)
View(p_1_6_2)
View(data.p_6_grid_acc)
#___Type_1_ribbon
p_1_6_2 = data.p_6_grid_acc %>%
filter(Tree==100) %>%
mutate(Year = str_replace(Year, "_", "-")) %>%
mutate(In_Bands = str_replace_all(In_Bands, "_", " + ")) %>%
mutate(In_Bands = str_replace_all(In_Bands, "Meterology", "Meteorology")) %>%
mutate(Accuracy = Accuracy *100) %>%
ggplot(aes(x=Year,y=Accuracy,group=In_Bands,color=In_Bands,fill=In_Bands)) +
stat_summary(fun = 'mean',geom = 'line') +
stat_summary(fun.data = 'mean_se',
geom = 'ribbon',
alpha = 1/3,
size=0.1,
color='grey99')
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.60),
legend.background = element_blank()) +
ylab('Overall Accuracy(%)') +
labs(color = 'Input predictors',
fill = 'Input predictors')
plt_inbands_acc_ribbon
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 20,
height = 13,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 20,
height = 13,
units = "cm",
dpi=500)
plt_inbands_acc_ribbon = p_1_6_2 +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x.bottom = element_line(),
axis.line.y.left = element_line(),
legend.position = c(0.3, 0.60),
legend.background = element_blank()) +
ylab('Accuracy(%)') +
labs(color = 'Input predictors',
fill = 'Input predictors')
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.svg",
width = 20,
height = 13,
units = "cm",
dpi=500)
ggsave(plot = plt_inbands_acc_ribbon,
"../Section_1_6_2_plt_inbands_acc_ribbon.png",
width = 20,
height = 13,
units = "cm",
dpi=500)
